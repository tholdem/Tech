global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'
def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'
endglobal

snippet template "Basic template" bA
\documentclass[12pt]{article} 
\usepackage{amsmath, amsfonts, amsthm, amssymb, graphicx}
\usepackage[utf8]{inputenc}
\usepackage[english]{babel}
	
\theoremstyle{plain}
\newtheorem{thm}{Theorem}
\newtheorem{lemma}{Lemma}
\newtheorem{coro}{Corollary}
\newtheorem{prop}{Proposition}

\renewcommand*{\thefootnote}{\fnsymbol{footnote}}
\renewcommand\qedsymbol{}

\theoremstyle{remark} 
\newtheorem{case}{Case}

\newcommand{\rr}{\ensuremath{\mathbb{R}}}
\newcommand{\zz}{\ensuremath{\mathbb{Z}}}
\newcommand{\qq}{\ensuremath{\mathbb{Q}}}
\newcommand{\nn}{\ensuremath{\mathbb{N}}}
\newcommand{\ff}{\ensuremath{\mathbb{F}}}

\providecommand{\norm}[1]{\lVert#1\rVert}

\pdfsuppresswarningpagegroup=1

\begin{document}
$0
\end{document}
endsnippet

snippet lecture "Lecture template" bA
\documentclass[12pt,class=article,crop=false]{standalone} 
\input{../preamble.tex}

\begin{document}
$0
\end{document}
endsnippet

snippet homework "homework template" bA
\documentclass[12pt]{article}
\input{../preamble.tex}

\begin{document}
\centerline {\textsf{\textbf{\LARGE{Homework $1}}}}
\centerline {Jaden Wang}
\vspace{.15in}

$0
\end{document}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet sec "section{}" bA
\\section{$1}
endsnippet

snippet ssec "subsection{}" bA
\\subsection{$1}
endsnippet

snippet sssec "subsubsection{}" bA
\\subsubsection{$1}
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet thm "Theorem environment" bA
\begin{thm}
$0
\end{thm}
endsnippet

snippet defn "Definition environment" bA
\begin{defn}
$0
\end{defn}
endsnippet

snippet claim "claim environment" bA
\begin{claim}
$0
\end{claim}
endsnippet

snippet prf "Proof environment" bA
\begin{proof}
$0
\end{proof}
endsnippet

snippet lem "Lemma environment" bA
\begin{lem}
$0
\end{lem}
endsnippet

snippet prop "Proposition environment" bA
\begin{prop}
$0
\end{prop}
endsnippet

snippet coro "Corollary environment" bA
\begin{coro}
$0
\end{coro}
endsnippet

snippet eg "Example environment" bA
\begin{eg}
$0
\end{eg}
endsnippet

snippet ques "question environment" bA
\begin{ques}
$0
\end{ques}
endsnippet

snippet case "Case environment" bA
\begin{case}[$1]
$0
\end{case}
endsnippet

snippet note "Note environment" bA
\begin{note}
$0
\end{note}
endsnippet

snippet remark "Remark environment" bA
\begin{remark}
$0
\end{remark}
endsnippet

snippet probl "Problem environment" bA
\begin{problem}[$1]
$0
\end{problem}
endsnippet

snippet table "Table environment" b
\begin{table}[${1:H}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
~\begin{figure}[${1:H}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{./figures/$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet renum "Enumerate (Roman)" bA
\begin{enumerate}[label=(\roman*)]
	\item $0
\end{enumerate}
endsnippet

snippet aenum "Enumerate (Arabic)" bA
\begin{enumerate}[label=(\arabic*)]
	\item $0
\end{enumerate}
endsnippet

snippet eenum "Enumerate (English alphabet)" bA
\begin{enumerate}[label=(\alph*)]
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet curb "math with curly bracket cases" bA
\begin{equation*}
$1
\begin{cases}
	$0
\end{cases}
\end{equation*}
endsnippet

context "math()"
snippet => "implies" Ai
\implies
endsnippet

context "math()"
snippet <= "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

context "math()"
snippet o2o "<->" Ai
\leftrightarrow
endsnippet

snippet mk "Math" wA
$ ${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet md "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
\end{align*}
endsnippet

snippet eqn "Equation aligned" bA
\begin{equation*}
\begin{split}
	${1:${VISUAL}}
\end{split}
\end{equation*}
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{ $2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{ $1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wr
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '([A-Za-z])nn' "auto subscript n" wrA
`!p snip.rv = match.group(1)`_n
endsnippet

context "math()"
snippet '([A-Za-z])kk' "auto subscript k" wrA
`!p snip.rv = match.group(1)`_k
endsnippet

context "math()"
snippet '([A-Za-z])ii' "auto subscript i" wrA
`!p snip.rv = match.group(1)`_i
endsnippet

context "math()"
snippet '([A-Za-z])jj' "auto subscript j" wrA
`!p snip.rv = match.group(1)`_j
endsnippet

context "math()"
snippet '([A-Za-z])_([A-Za-z])(\+|-)(\d)' "auto subscript n (or any letter) +/- d" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)``!p snip.rv = match.group(3)``!p snip.rv = match.group(4)`}
endsnippet

context "math()"
snippet == "equals, used in aligned environment" iA
&= $1 \\\\
endsnippet

context "math()"
snippet pmat "pmat" A
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

context "math()"
snippet bmat "bmat" A
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

context "math()"
snippet ( "( )" i
(${1:${VISUAL}}) $0
endsnippet

context "math()"
snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr( "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr| "left| right|" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet { "{ }" i
\{${1:${VISUAL}}\} $0
endsnippet

context "math()"
snippet lr{ "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lr[ "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lra "leftangle rightangle" iA
\langle ${1:${VISUAL}} \rangle$0
endsnippet

context "math()"
snippet 'infsum:([A-Za-z])(\d)' "infinite sum" rwA
\sum_{ ${1:`!p snip.rv = match.group(1)`= `!p snip.rv = match.group(2)`}}^{\infty} ${2:}
endsnippet

context "math()"
snippet 'sum:([A-Za-z])(\d)([A-Za-z]|\d)' "sum" rwA
\sum_{ ${1:`!p snip.rv = match.group(1)`= `!p snip.rv = match.group(2)`}}^{ ${2:`!p snip.rv = match.group(3)`}} ${3:}
endsnippet

context "math()"
snippet 'prod:([A-Za-z])(\d)([A-Za-z]|\d)' "product" rwA
\prod_{ ${1:`!p snip.rv = match.group(1)`= `!p snip.rv = match.group(2)`}}^{ ${2:`!p snip.rv = match.group(3)`}} ${3:}
endsnippet

priority 300
context "math()"
snippet 'inflim:([A-Za-z])' "limit" rwA
\lim_{ ${1:`!p snip.rv = match.group(1)`} \to \infty} ${2:}
endsnippet

priority 300
context "math()"
snippet 'lim:([A-Za-z])([A-Za-z]|\d)' "limit" rwA
\lim_{ ${1:`!p snip.rv = match.group(1)`} \to ${2:`!p snip.rv = match.group(2)`}} 
endsnippet

priority 300
context "math()"
snippet 'int:([A-Za-z]|\d)([A-Za-z]|\d)' "integral" rwA
\int_{ ${1:`!p snip.rv = match.group(1)`}}^{ ${2:`!p snip.rv = match.group(2)`}} ${3:${VISUAL}} $0
endsnippet

priority 300
context "math()"
snippet 'infint:_([A-Za-z]|\d)' "infinity integral" rwA
\int_{`!p snip.rv = match.group(1)`}^{\infty} ${1:${VISUAL}} $0
endsnippet

priority 300
context "math()"
snippet 'infint:^([A-Za-z]|\d)' "infinity integral" rwA
\int_{-\infty}^{ `!p snip.rv = match.group(1)`} ${1:${VISUAL}} $0
endsnippet

priority 300
context "math()"
snippet 'infint2' "negative infinity to infinity integral" rwA
\int_{-\infty}^{\infty} ${1:${VISUAL}} $0
endsnippet

context "math()"
snippet 'd([A-Za-z])d([A-Za-z])' "derivative" rwA
\frac{d ${1:`!p snip.rv = match.group(1)`}}{d ${2:`!p snip.rv = match.group(2)`}} $0
endsnippet

context "math()"
snippet 'd(\d)([A-Za-z])d([A-Za-z])' "2nd derivative" rwA
\frac{d^${1:`!p snip.rv = match.group(1)`} ${2:`!p snip.rv = match.group(2)`}}{d {${3:`!p snip.rv = match.group(3)`} }^${4:`!p snip.rv = match.group(1)`}} $0
endsnippet

context "math()"
snippet 'part:([A-Za-z])([A-Za-z])' "partial derivative" rwA
\frac{\partial ${1:`!p snip.rv = match.group(1)`}}{\partial ${2:`!p snip.rv = match.group(2)`}} $0
endsnippet

context "math()"
snippet 'part(\d):([A-Za-z])([A-Za-z])' "partial 2nd derivative" rwA
\frac{\partial^${1:`!p snip.rv = match.group(1)`} ${2:`!p snip.rv = match.group(2)`}}{\partial { ${3:`!p snip.rv = match.group(3)`}}^${4:`!p snip.rv = match.group(1)`}} $0
endsnippet

context "math()"
snippet sr "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sq "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... degree" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... degree" iA
^{($1)}$0
endsnippet

context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

context "math()"
snippet te "there exists" A
\ \exists \ 
endsnippet

context "math()"
snippet fa "forall" A
\ \forall \ 
endsnippet

context "math()"
snippet xp1 "x" A
x_{n+1}
endsnippet

context "math()"
snippet mc "mathcal" A
\mathcal{ $1}$0
endsnippet

context "math()"
snippet ll "l" iA
\ell
endsnippet

context "math()"
snippet nab "nabla" iA
\nabla 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

context "math()"
snippet cd "cdot" A
\cdot 
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|tan|arccot|cot|csc|ln|log|exp|star|perp|eta|Eta)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|epsilon|delta|theta|zeta|beta|alpha|gamma|phi|psi|tau|mu|nu|sigma|rho|omega|lambda|max|min|Pi|Delta|Theta|Gamma|Phi|Sigma|Omega)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet argmi "argmin" A
\argmin
endsnippet

context "math()"
snippet aa "alpha" A
\alpha
endsnippet

context "math()"
snippet bb "beta" A
\beta
endsnippet

context "math()"
snippet gg "gamma" A
\gamma
endsnippet

context "math()"
snippet dd "delta" A
\delta
endsnippet

context "math()"
snippet sg "sigma" A
\sigma
endsnippet

context "math()"
snippet ee "epsilon" A
\epsilon
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet tsp "transpose" iA
^{T}
endsnippet


context "math()"
snippet comp "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus $0
endsnippet

context "math()"
snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

context "math()"
snippet ss "subset" A
\subseteq $0
endsnippet

context "math()"
snippet ct "contain" A
\supseteq $0
endsnippet

context "math()"
snippet nin "not in " iA
\not\in 
endsnippet

context "math()"
snippet cup "cup" iA
\cup 
endsnippet

context "math()"
snippet UU "bigcup" iA
\bigcup_{ ${1:i=${2: 1}}}^{${3: n}} $0
endsnippet

context "math()"
snippet infU "infinite unions" iA
\bigcup_{ ${1:n} =1}^{\infty} $0
endsnippet

context "math()"
snippet cap "cap" A
\cap 
endsnippet

context "math()"
snippet NN "bigcap" iA
\bigcap_{ ${1:i=${2: 1}}}^{${3: n}} $0
endsnippet

context "math()"
snippet infN "infinite intersections" iA
\bigcap_{ ${1:n} =1}^{\infty} $0
endsnippet

context "math()"
snippet es "emptyset" A
\O
endsnippet

context "math()"
snippet rr "real" iA
\rr
endsnippet

context "math()"
snippet qq "Q" A
\qq
endsnippet

context "math()"
snippet zz "Z" iA
\zz
endsnippet

context "math()"
snippet nb "N" A
\nn
endsnippet

context "math()"
snippet cc "C" A
\cc
endsnippet

context "math()"
snippet <> "hokje" iA
\diamond 
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet SI "SI" iA
\SI{$1}{$2}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet


priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}$0
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\wh{ $1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\wh{ `!p snip.rv=match.group(1)`}$0
endsnippet

priority 10
context "math()"
snippet "til" "tilde" riA
\widetilde{ $1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])til" "tilde" riA
\widetilde{ `!p snip.rv=match.group(1)`}$0
endsnippet

context "math()"
snippet "ub" "underbrace" riA
\underbrace{ $1}_{ $2} $0
endsnippet

context "math()"
snippet '([A-Za-z])'' "function first derivative" wr
`!p snip.rv=match.group(1)`'($1)$0
endsnippet

context "math()"
snippet ap= "approximately equals" wA
\\approx
endsnippet

context "math()"
snippet q44 "spaces" iA
\qquad 
endsnippet

context "math()"
snippet q22 "spaces" iA
\quad 
endsnippet

context "math()"
snippet prop "propto" iA
\propto 
endsnippet

context "math()"
snippet '([A-Za-z])_ij' "matrix index" rwA
`!p snip.rv = match.group(1)`_{ij} $0
endsnippet

context "math()"
snippet '([A-Za-z])_ii' "matrix index" rwA
`!p snip.rv = match.group(1)`_{ii} $0
endsnippet

context "math()"
snippet ** "star" iA
^* 
endsnippet

context "math()"
snippet bin "n choose k" iA
\binom{$1}{$2} $0
endsnippet

context "math()"
snippet norm "norm (custom command)" iA
\norm{ $1} $0
endsnippet

context "math()"
snippet ve "bold nonitalisized vector (custom command)" A
\ve{ $1} $0
endsnippet

snippet bd "bold" A
\allbold{$1} $0
endsnippet

snippet it "italisize" 
\emph{$1} $0
endsnippet

snippet ie "i.e." 
\emph{i.e.} $0
endsnippet

snippet eg "e.g." 
\emph{e.g.} $0
endsnippet

snippet wrt "w.r.t." 
w.r.t.\ $0
endsnippet

snippet st "s.t."
s.t.\ $0
endsnippet

context "math()"
snippet tx "text in math mode" A
\text{ $1} $0
endsnippet

context "math()"
snippet iin "in" iA
\in
endsnippet

context "math()"
snippet to "to" iA
\to
endsnippet

context "math()"
snippet pt "partial" iA
\partial 
endsnippet

context "math()"
snippet "us" "underset" rwA
\underset{ $1}{ $2} $0
endsnippet

# vim:ft=snippets
